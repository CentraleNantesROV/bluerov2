<?xml version="1.0"?>
<robot name="bluerov2" xmlns:xacro="http://www.ros.org/wiki/xacro" >
    
  <xacro:arg name="namespace" default="bluerov2"/>
  <!-- thruster joints are fixed if not for gazebo use -->
  <xacro:arg name="simulation" default="true"/>
  
  <xacro:arg name="density" default="1000"/>
  
  <xacro:property name="ns" value="$(arg namespace)"/>
  <xacro:property name="density" value="$(arg density)"/>

  <!-- Main body -->    
  <xacro:property name="x_size" value="0.40"/>
  <xacro:property name="y_size" value="0.25"/>
  <xacro:property name="z_size" value="0.1"/>

  <xacro:property name="mass" value="14.8"/>
      
  <!-- other props -->
  <xacro:property name="prop_mass" value="0.07"/>
  
  <!-- to set correct buoyancy volume with 1 % positive factor -->
  <xacro:property name="buoyant_correction" value="${1.01*pow((mass + 6*prop_mass)/(density*x_size*y_size*z_size), 1./3)}"/>
  <!-- Center of buoyancy -->
  <xacro:property name="z_cob" value="${-buoyant_correction*z_size/4}"/>
  <!-- Center of gravity -->
  <xacro:property name="z_cog" value="${-buoyant_correction*z_size}"/>
  
  <xacro:property name="visual_mesh_file" value="file://$(find bluerov2_description)/meshes/bluerov2_noprop.dae"/>
  <xacro:property name="collision_mesh_file" value="file://$(find bluerov2_description)/meshes/bluerov2_noprop.stl"/>

  <!-- Vehicle base link -->
    <link name="${ns}/base_link">
    <inertial>
        <mass value="${mass}"/>
        <origin xyz="0 0 ${z_cog}"/>
        
    <!-- BlueROV2 values from "Model Predictive Control for the BlueROV2", 
        Emil MÃ¡r Einarsson, Andris Lipenitis, Master thesis, 2020 
        for now make Ignition crash?-->   
<!--         <inertia ixx="0.21" ixy="0.00" ixz="0.00" iyy="0.245" iyz="0.00" izz="0.245"/> -->
        <inertia ixx="5.2539" ixy="0.0144" ixz="0.3341" iyy="7.9420" iyz="0.026" izz="6.9123"/>
        
            <!-- Perfect rectangle -->
<!--        <inertia
        ixx="${mass/12*(y_size*y_size+z_size*z_size)}" ixy="0.0" ixz="0.0"
        iyy="${mass/12*(x_size*x_size + z_size*z_size)}" iyz="0.0"
        izz="${mass/12*(x_size*x_size + y_size*y_size)}" />-->
    </inertial>
    <visual>
        <geometry>
        <mesh filename="${visual_mesh_file}"/>
        </geometry>
    </visual>
    
    <collision>
        <origin xyz="0 0 ${z_cob}"/>
        <!-- Box adjusted for buoyancy -->
        <geometry>
            <box size="${x_size*buoyant_correction} ${y_size*buoyant_correction} ${z_size*buoyant_correction}"/>
        </geometry>
    </collision>

<!--    <gazebo>
        <velocity_decay>
            <linear>-250.15 -70.364 -170.955</linear>
            <angular>1.888 0.761 3.744</angular>
        </velocity_decay>
</gazebo>-->
        
    </link>
  
<xacro:include filename="hydrodynamics.xacro"/>
<xacro:include filename="thrusters.xacro"/>
<xacro:include filename="sensors.xacro"/>

  
<!-- other Gazebo plugins -->
<xacro:if value="$(arg simulation)">
    <gazebo>
        <plugin filename="ignition-gazebo-joint-state-publisher-system" name="ignition::gazebo::systems::JointStatePublisher"/>
        
        <plugin
            filename="ignition-gazebo-odometry-publisher-system"
            name="ignition::gazebo::systems::OdometryPublisher">
            <odom_frame>${ns}/odom</odom_frame>
            <dimensions>3</dimensions>
            <robot_base_frame>${ns}/base_link</robot_base_frame>
            <odom_publish_frequency>10</odom_publish_frequency>
        </plugin>
        
        <plugin
            filename="ignition-gazebo-pose-publisher-system"
            name="ignition::gazebo::systems::PosePublisher">
            <publish_link_pose>false</publish_link_pose>
            <publish_collision_pose>false</publish_collision_pose>
            <publish_visual_pose>false</publish_visual_pose>
            <publish_nested_model_pose>true</publish_nested_model_pose>
        </plugin>
    </gazebo>
</xacro:if>


</robot>
